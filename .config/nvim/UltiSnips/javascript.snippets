global !p
def current_file():
	from glob import glob
	return vim.eval("expand('%:t:r')")
endglobal

global !p
def javascript_file_basename():
	return current_file().split(".", 1)[0]
endglobal

snippet module
(function () {

	${1:var foo = function() {
		return "foo";
	};}

	${2:return {
		foo: foo
	}}
}());$0
endsnippet

snippet switch
switch ($1) {
	$0
}
endsnippet

snippet case 
case $1:
	$0
endsnippet

snippet require "[const|let|var A] require('./a')"
$2 require($1)$0
endsnippet

snippet config "config/index.js"
const env = process.env.NODE_ENV || 'development';
const cfg = require('./config.' + env);

module.exports = cfg;$0
endsnippet

snippet express "require('express')"
const express = require('express')
endsnippet

snippet react "React import statement."
import React from 'react';

const ${1:`!p snip.rv = javascript_file_basename()`} = () => (
	$0
);
endsnippet

snippet react "React import statement with Component."
import React, { Component } from 'react';

class ${1:`!p snip.rv = javascript_file_basename()`} extends Component {
	
	render() {
		$0
	}
}
endsnippet

snippet import "import [dependency] from '[module]'"
import $2 from '$1'$0
endsnippet

snippet mapStateToProps "Map Redux state to React component props"
const mapStateToProps = state => {
	return $0
}
endsnippet

snippet redux "import { combineReducers, createStore } from 'redux'"
import { combineReducers, createStore } from 'redux'$0
endsnippet

snippet webpack "Minimap webpack config"
const path = require('path'); 

module.exports = {
	devtool: 'cheap-module-eval-source-map',
	entry: './src/index.js',
	output: {
		filename: 'bundle.js'
		path: path.resolve(__dirname, 'dist')
	}
};
endsnippet

snippet rtest "React :: unit testing react components"
import React from 'react';
import ReactDOM from 'react-dom';

test('$1', () => {
  const div = document.createElement('div');
  ReactDOM.render(<$2 />, div);
  ReactDOM.unmountComponentAtNode(div);$0
});
endsnippet

snippet jest "Jest :: specification stub"
describe('$1', () => {
	test('$2', () => {
		$0
	});
});
endsnippet

snippet jestit "Jest :: specification stub"
describe('$1', () => {
	it('should $2', () => {
		$0
	});
});
endsnippet

snippet test "Jest :: test function"
test('$1', () => {
	$0
});
endsnippet

snippet test "Jest :: test async function"
test('$1', async () => {
	$0
});
endsnippet

snippet spec "Mocha :: specification stub"
const assert = require('assert');

describe('$1', () => {

	it('should $2', () => {
		$0
	});
});
endsnippet

snippet desc "Mocha :: describe"
describe('$1', () => {

	it('should $2', () => {
		$0
	});
});
endsnippet

snippet its "Mocha :: it should"
it('should $1', () => {
	$0
});
endsnippet

snippet before "Mocha :: before"
before(() => {
	$0
});
endsnippet

snippet before "Mocha :: after"
after(() => {
	$0
});
endsnippet

snippet beforeEach "Mocha :: beforeEach"
beforeEach(() => {
	$0
});
endsnippet

snippet afterEach "Mocha :: afterEach"
afterEach(() => {
	$0
});
endsnippet

snippet jsdom "Initialize JSDOM module"
const { JSDOM } = jsdom;
const dom = new JSDOM('<!DOCTYPE html><html><body><div id="$1" /></body></html>', {url: 'http://testhost:8080/bar.html'});
global.document = dom.window.document;
global.window = dom.window;$0
endsnippet

snippet supertest "Supertest with Express route"
const http = require('http');
const express = require('express');
const request = require('supertest');

describe('$1', () => {

  let server, app, router;

  beforeEach(() => {

    router = $0;
    app = express();
    app.use((req, res) => router(req, res));
    server = http.createServer(app);
    server.listen(0);
  });

  afterEach(done => {
    server.close(done);
  });
});
endsnippet

snippet webpack "webpack.config.js"
var path = require('path');

module.exports = {
  mode: 'development',
  entry: {
    home: './index.js',
    other: './other-entry.js',
  },
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: '[name]-bundle.js'
  },
};
endsnippet

extends html
