global !p
def current_dir():
	from glob import glob
	return vim.eval("expand('%:h')")
endglobal

global !p
def current_file():
	from glob import glob
	return vim.eval("expand('%:t:r')")
endglobal

global !p
def scala_file_basename():
	return current_file().split(".scala", 1)[0]
endglobal

global !p
def package_for(path):
	import re
	regexes = ["src/main/scala", "src/test/scala"]

	pkg = "my.package.name"
	for r in regexes:
		p = re.compile(r)
		m = p.search(path)
		if m:
			pkg = path.split(r, 1)[1][1:].replace("/", ".")

	return pkg
endglobal

global !p
def class_name_from_spec():
	return scala_file_basename().split("Spec", 1)[0]
endglobal

snippet package "package" 
package ${1:`!p snip.rv = package_for(current_dir())`}$0
endsnippet

snippet class "class"
class ${1:`!p snip.rv = scala_file_basename()`} ${3:extends ${4:SuperType}} {
	$0
}
endsnippet

snippet classp "class with paramters"
class ${1:`!p snip.rv = scala_file_basename()`}(${2:args}) {
	$0
}
endsnippet

snippet object "object"
object ${1:`!p snip.rv = scala_file_basename()`} {
	$0
}
endsnippet

snippet trait "trait"
trait ${1:`!p snip.rv = scala_file_basename()`} {
	$0
}
endsnippet

snippet with "with"
with ${1:type} ${2:with...}$0
endsnippet

snippet extends "extends"
extends ${1:type} ${2:with...}$0
endsnippet

snippet arg "argument"
${1:arg}: ${2:type}$0
endsnippet

snippet args "arguments"
${1:arg}: ${2:type}, ${3:args|arg...}$0
endsnippet

snippet cclass "Create case class"
case class ${1:className}(${2:attrName}: ${3:type})$0
endsnippet

snippet cobject "Create case object"
case object ${1:name}$0
endsnippet

snippet app "Create Main object"
object ${1:Main} extends App {
	$0
}
endsnippet

snippet main "Create Main class"
object ${1:Main} {
	def main(args: Array[String]) {
		$0
	}
}
endsnippet

snippet match "Create a pattern matching"
${1:target} match {
	case ${2:matchTo} => ${3:statement}$0
}
endsnippet

snippet case "Create a case statement"
case ${1:matchAgainst} => $0
endsnippet

snippet bl "code block"
{
	$0
}
endsnippet

snippet afun "Create anonymous function"
() => {
	$0
}
endsnippet

snippet akkamain "Creates a simple Akka App for PoC"
import akka.actor._

class MyActor extends Actor {
	def receive = {
		case _ =>
	}
}

object Main extends App {
	val sys = ActorSystem()
	val a = sys.actorOf(Props[MyActor], "MyActor")
	$0
}
endsnippet

snippet impdur "Import scala.concurrent.duration._"
import scala.concurrent.duration.${1:_}$0
endsnippet

snippet freespec "Create FreeSpec class"
package ${1:`!p snip.rv = package_for(current_dir())`}

import org.scalatest.FreeSpec

class ${2:`!p snip.rv = scala_file_basename()`} extends FreeSpec {
	"${3:description}" - {
		$0
	}
}
endsnippet

snippet flatspec "Create FlatSpec class" 
package ${1:`!p snip.rv = package_for(current_dir())`}

import org.scalatest.{FlatSpec, Matchers}

class ${2:`!p snip.rv = scala_file_basename()`} extends FlatSpec with Matchers {

	behavior of "${3:`!p snip.rv = class_name_from_spec()`}"

	it should "${4:description}" in {
		$0
	}
}
endsnippet

snippet sshould "Create new should group"
"${1:Identifier}" should "${2:description}" in {
	$0
}
endsnippet

snippet itshould "Create should case"
it should "${1:description}" in {
	$0
}
endsnippet

snippet akkatest "Create new Akka test"
package ${1:`!p snip.rv = package_for(current_dir())`}

import akka.actor.{ActorSystem, Props, Actor, ActorRef}
import akka.testkit.{TestKit, TestProbe, ImplicitSender}
import org.scalatest.{BeforeAndAfterAll, FlatSpecLike, Matchers}

class ${2:`!p snip.rv = scala_file_basename()`} extends TestKit(ActorSystem()) with ImplicitSender
	with FlatSpecLike with Matchers with BeforeAndAfterAll {

	override def afterAll {
		TestKit.shutdownActorSystem(system)
	}
	
	behavior of "${3:`!p snip.rv = class_name_from_spec()`}" 

	it should "${4:description}" in {
		$0
	}
}
endsnippet

snippet receive "Akka Actor Receive"
def ${1:receive}: Receive = $0
endsnippet

snippet jsonsup "Spray JsonSupport"
trait ${1:JsonSupport} extends SprayJsonSupport with DefaultJsonProtocol {
	implicit val ${2:myFormat} = jsonFormat${3:1}(${4:...})$0
}
endsnippet
