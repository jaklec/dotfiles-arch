# global !p
# def java_package(path):
# 	import os	
# 	absolute_path = os.path.abspath(path).split("/src/")[1].split("/")
# 	src_dir_index = 0

# 	while absolute_path[src_dir_index] != "java":
# 		src_dir_index += 1

# 	if src_dir_index != 0:
# 		src_dir_index += 1
# 		package_string = ".".join(absolute_path[src_dir_index:-1])
# 	else:
# 		package_string = "my.package.name"

# 	return package_string + ";"
# endglobal


# snippet package "package"
# package ${1:`!p snip.rv = java_package(path)`}$0
# endsnippet

global !p
def current_dir():
	from glob import glob
	return vim.eval("expand('%:h')")
endglobal

global !p
def current_file():
	from glob import glob
	return vim.eval("expand('%:t:r')")
endglobal

global !p
def java_file_basename():
	return current_file().split(".java", 1)[0]
endglobal

global !p
def package_for(path):
	import re
	regexes = ["src/main/java", "src/test/java"]

	pkg = "my.package.name"
	for r in regexes:
		p = re.compile(r)
		m = p.search(path)
		if m:
			pkg = path.split(r, 1)[1][1:].replace("/", ".")

	return pkg
endglobal

snippet sout "Print line"
System.out.println(${1:output...});$0
endsnippet

snippet bl "Code block"
{
	$0
}
endsnippet

snippet case "case"
case $1:
	$2
$0
endsnippet

snippet package "Create package for class"
package ${1:`!p snip.rv = package_for(current_dir())`;}$0
endsnippet

snippet class "Create new class"
${2:public} class ${1:`!p snip.rv = java_file_basename()`} { 
	$0
}
endsnippet

snippet interface "Create new interface"
${2:public} interface ${1:`!p snip.rv = java_file_basename()`} {
	$0
}
endsnippet

snippet println "System.out.println(...);"
System.out.println(${1:"foo"});$0
endsnippet

snippet junit "Create new Junit test class"
package ${1:`!p snip.rv = package_for(current_dir())`;}

import org.junit.Test;

import static org.junit.Assert.*;

public class ${2:`!p snip.rv = java_file_basename()`} {

	@Test
	public void ${3:testMe}() {
		$0
	}
}
endsnippet

snippet test "Create new Junit test method"
@Test
public void ${1:testMe}() {
	$0
}
endsnippet

snippet spring-rest-controller "Spring REST controller class"
package ${1:`!p snip.rv = package_for(current_dir())`}

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/")
public class ${2:`!p snip.rv = java_file_basename()`}{

		@GetMapping("hello")
    public String greeting() {
        return "Greetings from Spring Boot!";
    }
}
endsnippet
