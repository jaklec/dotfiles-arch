global !p
def kotlin_package(path):
	import os	
	absolute_path = os.path.abspath(path).split("/src/")[1].split("/")
	src_dir_index = 0

	while absolute_path[src_dir_index] != "kotlin":
		src_dir_index += 1

	if src_dir_index != 0:
		src_dir_index += 1
		package_string = ".".join(absolute_path[src_dir_index:-1])
	else:
		package_string = "my.package.name"

	return package_string
endglobal


snippet package "package"
package ${1:`!p snip.rv = kotlin_package(path)`}$0
endsnippet


snippet spring-rest-controller "Spring REST controller class"
package ${1:`!p snip.rv = kotlin_package(path)`}

import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestParam
import org.springframework.web.bind.annotation.RestController

data class Greeting(val message: String)

@RestController
class GreetingController {

    @GetMapping("/greeting")
    fun greeting(@RequestParam(value = "name", defaultValue = "World") name: String): Greeting {
        return Greeting("Hello $name")
    }
}
endsnippet

snippet junit-test-class "Junit 5 test skeleton"
package ${1:`!p snip.rv = kotlin_package(path)`}

import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.TestInstance

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class ${2:Foo}Test {

    @Test
    fun ${3:foo}() {
        assertEquals(2, 1 + 1)
    }
}
endsnippet
